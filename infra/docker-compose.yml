version: '3.8'

networks:
  digital-id-network:
    driver: bridge
    encrypted: true
  monitoring-network:
    driver: bridge
    encrypted: true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  vault_data:
    driver: local

services:
  # ============================================
  # CORE SERVICES
  # ============================================
  
  # Rust Core Identity Engine
  rust-core:
    build: 
      context: ../core-id-engine
      dockerfile: Dockerfile
    container_name: digital-id-rust-core
    ports:
      - "3000:3000"
    environment:
      - RUST_LOG=info
      - RUST_ENV=production
      - DATABASE_URL=postgresql://user:${DB_PASSWORD:-defaultpassword}@postgres:5432/digital_id
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - VAULT_ADDR=http://vault:8200
      - METRICS_PORT=9090
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - digital-id-network
      - monitoring-network
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - ./config/rust:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run

  # Go Microservices Gateway
  go-gateway:
    build: 
      context: ../digital-id-services/gateway
      dockerfile: Dockerfile
    container_name: digital-id-go-gateway
    ports:
      - "8080:8080"
      - "8443:8443"  # HTTPS port
    environment:
      - GIN_MODE=release
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://user:${DB_PASSWORD:-defaultpassword}@postgres:5432/digital_id
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - VAULT_ADDR=http://vault:8200
      - RUST_CORE_URL=http://rust-core:3000
      - KOTLIN_CONNECTORS_URL=http://kotlin-connectors:8080
      - FRAUD_DETECTION_URL=http://python-fraud:8000
      - TLS_CERT_PATH=/etc/ssl/certs/server.crt
      - TLS_KEY_PATH=/etc/ssl/private/server.key
      - CORS_ORIGINS=https://portal.digital-identity.gov.uk
    depends_on:
      rust-core:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-id-network
      - monitoring-network
    volumes:
      - ./ssl:/etc/ssl:ro
      - ./config/go:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Go Authentication Service
  go-auth:
    build:
      context: ../digital-id-services/credential
      dockerfile: Dockerfile
    container_name: digital-id-go-auth
    ports:
      - "8082:8080"
    environment:
      - GIN_MODE=release
      - DATABASE_URL=postgresql://user:${DB_PASSWORD:-defaultpassword}@postgres:5432/digital_id
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - VAULT_ADDR=http://vault:8200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - digital-id-network
    restart: unless-stopped

  # Go Verification Service
  go-verification:
    build:
      context: ../digital-id-services/verification
      dockerfile: Dockerfile
    container_name: digital-id-go-verification
    ports:
      - "8083:8080"
    environment:
      - GIN_MODE=release
      - DATABASE_URL=postgresql://user:${DB_PASSWORD:-defaultpassword}@postgres:5432/digital_id
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-id-network
    restart: unless-stopped

  # Go Registration Service
  go-registration:
    build:
      context: ../digital-id-services/registration
      dockerfile: Dockerfile
    container_name: digital-id-go-registration
    ports:
      - "8084:8080"
    environment:
      - GIN_MODE=release
      - DATABASE_URL=postgresql://user:${DB_PASSWORD:-defaultpassword}@postgres:5432/digital_id
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - digital-id-network
    restart: unless-stopped

  # Go Audit Service
  go-audit:
    build:
      context: ../digital-id-services/audit
      dockerfile: Dockerfile
    container_name: digital-id-go-audit
    ports:
      - "8085:8080"
    environment:
      - GIN_MODE=release
      - DATABASE_URL=postgresql://user:${DB_PASSWORD:-defaultpassword}@postgres:5432/digital_id
      - KAFKA_BROKERS=kafka:9092
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - digital-id-network
      - monitoring-network
    restart: unless-stopped

  # Kotlin Government Connectors
  kotlin-connectors:
    build: 
      context: ../gov-connectors
      dockerfile: Dockerfile
    container_name: digital-id-kotlin-connectors
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - DATABASE_URL=jdbc:postgresql://postgres:5432/digital_id
      - DATABASE_USERNAME=user
      - DATABASE_PASSWORD=${DB_PASSWORD:-defaultpassword}
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - VAULT_ADDR=http://vault:8200
      - HMRC_API_KEY=${HMRC_API_KEY}
      - NHS_API_KEY=${NHS_API_KEY}
      - DVLA_API_KEY=${DVLA_API_KEY}
      - DWP_API_KEY=${DWP_API_KEY}
      - COMPANIES_HOUSE_API_KEY=${COMPANIES_HOUSE_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-id-network
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - ./config/kotlin:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Python Fraud Detection
  python-fraud:
    build:
      context: ../fraud-analytics
      dockerfile: Dockerfile
    container_name: digital-id-python-fraud
    ports:
      - "8000:8000"
      - "8501:8501"  # Streamlit dashboard
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://user:${DB_PASSWORD:-defaultpassword}@postgres:5432/digital_id
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - MODEL_PATH=/app/models
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - PROMETHEUS_PORT=9091
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - digital-id-network
      - monitoring-network
    volumes:
      - ./models:/app/models:ro
      - ./config/python:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Next.js Citizen Portal
  nextjs-citizen-portal:
    build: 
      context: ../web-portal/citizen-portal
      dockerfile: Dockerfile
    container_name: digital-id-nextjs-citizen
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.digital-identity.gov.uk
      - NEXT_PUBLIC_WS_URL=wss://api.digital-identity.gov.uk/ws
      - NEXTAUTH_URL=https://portal.digital-identity.gov.uk
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      go-gateway:
        condition: service_healthy
    networks:
      - digital-id-network
    volumes:
      - ./config/nextjs:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Next.js Admin Dashboard
  nextjs-admin-dashboard:
    build: 
      context: ../web-portal/admin-dashboard
      dockerfile: Dockerfile
    container_name: digital-id-nextjs-admin
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://admin-api.digital-identity.gov.uk
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
    depends_on:
      go-gateway:
        condition: service_healthy
    networks:
      - digital-id-network
    restart: unless-stopped

  # ============================================
  # DATA SERVICES
  # ============================================

  # PostgreSQL Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: digital-id-postgres
    environment:
      POSTGRES_DB: digital_id
      POSTGRES_USER: user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-defaultpassword}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./sql/init:/docker-entrypoint-initdb.d:ro
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - digital-id-network
    command: |
      postgres -c config_file=/etc/postgresql/postgresql.conf
               -c shared_preload_libraries=pg_stat_statements
               -c logging_collector=on
               -c log_directory=/var/log/postgresql
               -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d digital_id"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: digital-id-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-defaultredispassword}
    command: |
      redis-server --requirepass ${REDIS_PASSWORD:-defaultredispassword}
                   --appendonly yes
                   --appendfsync everysec
                   --maxmemory 1gb
                   --maxmemory-policy allkeys-lru
                   --save 900 1
                   --save 300 10
                   --save 60 10000
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - digital-id-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Apache Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: digital-id-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - digital-id-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: digital-id-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - ./zookeeper/data:/var/lib/zookeeper/data
      - ./zookeeper/log:/var/lib/zookeeper/log
    networks:
      - digital-id-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # HashiCorp Vault for Secrets Management
  vault:
    image: vault:1.15
    container_name: digital-id-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://127.0.0.1:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./config/vault:/vault/config:ro
    networks:
      - digital-id-network
    command: vault server -config=/vault/config/vault.hcl
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # ============================================
  # MONITORING & OBSERVABILITY
  # ============================================

  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: digital-id-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/prometheus/rules:/etc/prometheus/rules:ro
    networks:
      - monitoring-network
      - digital-id-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: digital-id-grafana
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: digital-id-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Kibana Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: digital-id-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: digital-id-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "6831:6831/udp"  # Jaeger agent
      - "6832:6832/udp"  # Jaeger agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - monitoring-network
      - digital-id-network
    restart: unless-stopped

  # MLflow Model Registry and Tracking
  mlflow:
    image: python:3.11-slim
    container_name: digital-id-mlflow
    ports:
      - "5000:5000"
    environment:
      - BACKEND_STORE_URI=postgresql://user:${DB_PASSWORD:-defaultpassword}@postgres:5432/mlflow
      - DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: |
      sh -c "pip install mlflow psycopg2-binary boto3 &&
             mlflow server --backend-store-uri postgresql://user:${DB_PASSWORD:-defaultpassword}@postgres:5432/mlflow
                          --default-artifact-root /mlflow/artifacts
                          --host 0.0.0.0
                          --port 5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./mlflow/artifacts:/mlflow/artifacts
    networks:
      - digital-id-network
      - monitoring-network
    restart: unless-stopped

  # Nginx Load Balancer and Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: digital-id-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      - go-gateway
      - nextjs-citizen-portal
      - nextjs-admin-dashboard
      - grafana
      - kibana
      - jaeger
    networks:
      - digital-id-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data: